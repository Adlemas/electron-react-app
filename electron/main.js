const {
  app,
  BrowserWindow,
  ipcMain,
  Notification,
  dialog,
} = require("electron");

const isDev = false;

const path = require("path");

const fs = require("fs");

let mainWindow;

function createWindow() {
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 600,
    show: false,
    autoHideMenuBar: true,
    title: "Adlemas Edit",
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      worldSafeExecuteJavaScript: true,
      preload: path.join(__dirname, "preload.js"),
    },
  });

  const startURL = isDev
    ? "http://localhost:3000"
    : `file://${path.join(__dirname, "../build/index.html")}`;

  mainWindow.loadURL(startURL);

  mainWindow.once("ready-to-show", () => mainWindow.show());
  mainWindow.on("closed", () => {
    mainWindow = null;
  });

  mainWindow.webContents.openDevTools();
}

ipcMain.on("notify", (_, { title, message }) => {
  new Notification({
    title: title ? title : "Adlemas Notification",
    body: message ? message : "???",
  }).show();
});

ipcMain.on("readFile", (e, { path: dest, filename }) => {
  console.log("readFile", dest, filename);
  if (!dest || !filename) return;

  if (!fs.existsSync(path.join(dest, filename))) return;

  if (!fs.lstatSync(path.join(dest, filename)).isFile()) return;

  mainWindow.webContents.send("readFile", {
    content: fs
      .readFileSync(path.join(dest, filename))
      .toString("utf-8")
      .replace("\r", ""),
    filename,
  });
});

ipcMain.on("addFile", (e, { path: dest, title: filename }) => {
  if (!path || !filename) return;

  if (fs.existsSync(path.join(dest, filename))) return;

  fs.writeFileSync(path.join(dest, filename), "", { encoding: "utf-8" });

  if (fs.existsSync(path.join(dest, filename))) {
    const files = fs.readdirSync(dest).map((file) => {
      const fileStat = fs.lstatSync(path.join(dest, file));
      return {
        name: file,
        type: fileStat.isFile()
          ? "file"
          : fileStat.isDirectory()
          ? "folder"
          : "unknown",
        selected: file === filename,
      };
    });
    mainWindow.webContents.send("updateFolder", files);
  }
});

ipcMain.on("open", (e, type) => {
  console.log(type);

  if (!mainWindow) return;
  if (!type) return;

  dialog
    .showOpenDialog(mainWindow, {
      buttonLabel: "Open",
      properties:
        type === "file" ? ["openFile"] : ["createDirectory", "openDirectory"],
    })
    .then((response) => {
      console.log(response);
      if (!response.canceled) {
        const filepath = response.filePaths[0];
        const lstat = fs.lstatSync(filepath);
        if (lstat.isFile())
          e.reply("openFile", {
            filepath,
            filename: path.basename(filepath),
            content: fs.readFileSync(filepath).toString("utf-8"),
          });
        else if (lstat.isDirectory()) {
          const files = fs
            .readdirSync(filepath, { encoding: "utf-8" })
            .map((file) => {
              const fileStat = fs.lstatSync(path.join(filepath, file));
              return {
                name: file,
                type: fileStat.isFile()
                  ? "file"
                  : fileStat.isDirectory()
                  ? "folder"
                  : "unknown",
              };
            });
          e.reply("openFolder", {
            folderpath: filepath,
            foldername: path.basename(filepath),
            files: files,
          });
        }
      }
    });
});

ipcMain.on("createFile", (e, initialContent) => {
  if (!mainWindow) return;

  if (!initialContent)
    initialContent =
      "/**\n * File generated by Adlemas.\n * There you go!\n */";

  dialog
    .showSaveDialog(mainWindow, {
      buttonLabel: "Create and Open",
    })
    .then((response) => {
      if (!response.canceled) {
        const filepath = response.filePath;
        fs.writeFile(
          filepath,
          initialContent,
          {
            encoding: "utf-8",
          },
          (err) => {
            if (err) return;
            e.reply("openFile", {
              filepath,
              filename: path.basename(filepath),
              content: initialContent,
            });
          }
        );
      }
    });
});

app.setAppUserModelId("Adlemas.Editor");

app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

app.on("ready", createWindow);
